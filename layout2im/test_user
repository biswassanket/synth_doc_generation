#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jan 22 11:32:39 2021

@author: sanket
"""

import torch
import argparse
from models.generator import Generator
# from data.vg_custom_mask import get_dataloader as get_dataloader_vg
# from data.coco_custom_mask import get_dataloader as get_dataloader_coco
from data.publaynet_custom_mask import get_dataloader as get_dataloader_publaynet
from utils.data import imagenet_deprocess_batch
# from imageio import imwrite
import os
from pathlib import Path
import torch.backends.cudnn as cudnn

from tqdm import tqdm
from torchvision.utils import save_image
from utils.miscs import draw_bbox_batch, split_boxes_to_img, collect_boxes_with_dups

def parse_args():
    parser = argparse.ArgumentParser(description='generated random samples (dcgan_theano)')
    parser.add_argument('--model_name', dest='model_name', help='the model name', default='outdoor_64', type=str)
    parser.add_argument('--model_type', dest='model_type', help='the generative models and its deep learning framework', default='dcgan_theano', type=str)
    parser.add_argument('--framework', dest='framework', help='deep learning framework', default='theano')
    parser.add_argument('--model_file', dest='model_file', help='the file that stores the generative model', type=str, default=None)
    parser.add_argument('--output_image', dest='output_image', help='the name of output image', type=str, default=None)

    args = parser.parse_args()
    return args


if __name__=='__main__':
    args = parse_args()
    
    cudnn.benchmark = True
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

    result_save_dir = config.results_dir
    if not Path(result_save_dir).exists(): Path(result_save_dir).mkdir(parents=True)
    
    if config.dataset == 'publaynet':
        train_data_loader, val_data_loader = get_dataloader_publaynet(batch_size=config.batch_size, COCO_DIR=config.coco_dir)
    vocab_num = train_data_loader.dataset.num_object
    
    assert config.clstm_layers > 0
    
    netG = Generator(num_embeddings=vocab_num, embedding_dim=config.embedding_dim, z_dim=config.z_dim, clstm_layers=config.clstm_layers).to(device)
    
    print('load model from: {}'.format(config.saved_model))
    netG.load_state_dict(torch.load(config.saved_model))
    
    model_class = 
    
    
    
    
    
    